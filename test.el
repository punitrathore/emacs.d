(defvar d-q)
(defvar q-d)

(setq d-q (make-hash-table :test 'equal))
(puthash "[" "-" d-q)
(puthash "]" "=" d-q)
(puthash "'" "q" d-q)
(puthash "," "w" d-q)
(puthash "." "e" d-q)
(puthash "p" "r" d-q)
(puthash "y" "t" d-q)
(puthash "f" "y" d-q)
(puthash "g" "u" d-q)
(puthash "c" "i" d-q)
(puthash "r" "o" d-q)
(puthash "l" "p" d-q)
(puthash "/" "[" d-q)
(puthash "=" "]" d-q)
(puthash "\\" "\\" d-q)
(puthash "a" "a" d-q)
(puthash "o" "s" d-q)
(puthash "e" "d" d-q)
(puthash "u" "f" d-q)
(puthash "i" "g" d-q)
(puthash "d" "h" d-q)
(puthash "h" "j" d-q)
(puthash "t" "k" d-q)
(puthash "n" "l" d-q)
(puthash "s" ";" d-q)
(puthash "-" "'" d-q)
(puthash ";" "z" d-q)
(puthash "q" "x" d-q)
(puthash "j" "c" d-q)
(puthash "k" "v" d-q)
(puthash "x" "b" d-q)
(puthash "b" "n" d-q)
(puthash "m" "m" d-q)
(puthash "w" "," d-q)
(puthash "v" "." d-q)
(puthash "z" "/" d-q)

(setq q-d (make-hash-table :test 'equal))
(puthash "-" "[" q-d)
(puthash "=" "]" q-d)
(puthash "q" "'" q-d)
(puthash "w" "," q-d)
(puthash "e" "." q-d)
(puthash "r" "p" q-d)
(puthash "t" "y" q-d)
(puthash "y" "f" q-d)
(puthash "u" "g" q-d)
(puthash "i" "c" q-d)
(puthash "o" "r" q-d)
(puthash "p" "l" q-d)
(puthash "[" "/" q-d)
(puthash "]" "=" q-d)
(puthash "\\" "\\" q-d)
(puthash "a" "a" q-d)
(puthash "s" "o" q-d)
(puthash "d" "e" q-d)
(puthash "f" "u" q-d)
(puthash "g" "i" q-d)
(puthash "h" "d" q-d)
(puthash "j" "h" q-d)
(puthash "k" "t" q-d)
(puthash "l" "n" q-d)
(puthash ";" "s" q-d)
(puthash "'" "-" q-d)
(puthash "z" ";" q-d)
(puthash "x" "q" q-d)
(puthash "c" "j" q-d)
(puthash "v" "k" q-d)
(puthash "b" "x" q-d)
(puthash "n" "b" q-d)
(puthash "m" "m" q-d)
(puthash "," "w" q-d)
(puthash "." "v" q-d)
(puthash "/" "z" q-d)

(defun dvorak-to-qwerty ()
  (interactive)
  (let* ((end (point))
         (beg (progn (paredit-backward)
                     (point)))
         (contents (buffer-substring beg end)))
    (delete-region beg end)
    (dolist (char (append contents nil))
      (insert (gethash (concat (list char)) d-q)))))


(defun qwerty-to-dvorak ()
  (interactive)
  (let* ((end (point))
         (beg (progn (paredit-backward)
                     (point)))
         (contents (buffer-substring beg end)))
    (delete-region beg end)
    (dolist (char (append contents nil))
      (insert (gethash (concat (list char)) q-d)))))
